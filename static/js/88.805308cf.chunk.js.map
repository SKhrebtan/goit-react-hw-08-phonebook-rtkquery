{"version":3,"file":"static/js/88.805308cf.chunk.js","mappings":"2MAmBWA,EAAS,WAAH,IAAIC,EAAIC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAAE,OAC5BG,OAAOC,gBAAgB,IAAIC,WAAWN,IAAOO,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGV,GAAG,GAAG,E,8BCvBKG,EAAiB,WAO5B,MAAO,CACLC,YAPiBC,EAAAA,EAAAA,IAAYC,EAAAA,IAQ7BC,MAPWF,EAAAA,EAAAA,IAAYG,EAAAA,IAQvBC,cAPmBJ,EAAAA,EAAAA,IAAYK,EAAAA,IAQ/BC,OAPgBN,EAAAA,EAAAA,IAAYO,EAAAA,IAAtBD,MAQNE,aAPkBR,EAAAA,EAAAA,IAAYS,EAAAA,IASlC,E,oBCtBA,EAA+E,mBAA/E,EAAwG,kB,UCsHxG,MA9GA,WACE,IAAMC,GAAWC,EAAAA,EAAAA,MACTL,EAAUR,IAAVQ,MACRM,GAAwBC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACpBI,GAA4BL,EAAAA,EAAAA,UAAS,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAjCE,EAAMD,EAAA,GAAEE,EAASF,EAAA,GAEhBG,EAAarC,IACbsC,EAAetC,IAEfuC,EAAc,SAAAC,GAClB,IAAAC,EAAwBD,EAAME,cAAtBX,EAAIU,EAAJV,KAAMY,EAAKF,EAALE,MACd,OAAQZ,GACN,IAAK,OAAQC,EAAQW,GACnB,MACF,IAAK,SAAUP,EAAUO,GACvB,MACF,QACEC,QAAQC,IAAI,2FAElB,EAiBMC,EAAQ,WACZd,EAAQ,IACRI,EAAU,GACZ,EAEA,OACEW,EAAAA,EAAAA,KAAA,QAAMC,SArBc,SAAAR,GACpBA,EAAMS,iBACA,IAAMC,EAAa,CACzBnB,KAAAA,EACAI,OAAAA,EACA1B,GAAIT,KAER,GAAIqB,EAAM8B,MAAK,SAAAC,GAAO,OAAIA,EAAQrB,KAAKsB,SAASH,EAAWnB,KAAK,IAC1D,OAAOuB,MAAM,mIAEf7B,EAAS8B,EAAAA,gBAA4BL,IAEjCJ,GACN,EAQgCU,UAAWC,EAASC,UAC/CC,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACC,GAAI,CAAEC,QAAS,OAAQC,QAAS,OAAQC,IAAK,OAAQC,aAAc,QAASP,SAAA,EAClFX,EAAAA,EAAAA,KAACmB,EAAAA,EAAS,CACRzD,GAAG,iBACH0D,MAAM,OACNC,QAAQ,WACRC,KAAK,OACLtC,KAAK,OACLY,MAAOZ,EACPuC,QAAQ,yHACRC,MAAM,yIACJC,UAAQ,EACVC,KAAMpC,EACPqC,SAAUnC,KACXQ,EAAAA,EAAAA,KAACmB,EAAAA,EAAS,CACRzD,GAAG,iBACH0D,MAAM,QACNC,QAAQ,WACRC,KAAK,MACLtC,KAAK,SACNY,MAAOR,EACVmC,QAAQ,yFACRC,MAAM,+FACAC,UAAQ,EACRC,KAAMnC,EACRoC,SAAUnC,KAGVQ,EAAAA,EAAAA,KAAA,UAAQsB,KAAK,SAASb,UAAWC,EAAQC,SAAC,oBAGpD,E,UC5DA,EAhBe,WACX,IAAOnC,EAAeV,IAAfU,YACDE,GAAWC,EAAAA,EAAAA,MAGd,OAAQqB,EAAAA,EAAAA,KAACmB,EAAAA,EAAS,CAACzD,GAAG,iBAAiB0D,MAAM,wBAAwBC,QAAQ,WAC/DC,KAAK,OACNtC,KAAK,SACLY,MAAOpB,EACVmD,SANQ,SAAClC,GAAK,OAAKf,GAASkD,EAAAA,EAAAA,GAAOnC,EAAME,cAAcC,OAAQ,EAO3DkB,GAAI,CAACe,WAAY,SAItC,ECnBA,EAAuB,yBAAvB,EAAuD,yBAAvD,EAA0F,4BAA1F,EAA6H,yBC8C7H,EAzCmB,WACf,IAAMnD,GAAWC,EAAAA,EAAAA,MACnBmD,GAAoC9D,EAAAA,EAAAA,IAAYO,EAAAA,IAAxCD,EAAKwD,EAALxD,MAAOyD,EAASD,EAATC,UAAWC,EAAKF,EAALE,MACpBJ,GAAS5D,EAAAA,EAAAA,IAAYS,EAAAA,KAC1BwD,EAAAA,EAAAA,YAAU,WACLvD,EAAS8B,EAAAA,qBACb,GAAG,CAAC9B,IACN,IAAMwD,EAAmBN,EAAOO,cAE1BC,GAAmBC,EAAAA,EAAAA,UAAQ,WAC/B,GAAI/D,EACJ,OAAOA,EAAMsD,QAAO,SAAAvB,GAAO,OACzBA,EAAQrB,KAAKmD,cAAc7B,SAAS4B,EAAiB,GAE3D,GAAE,CAACA,EAAkB5D,IAEjB,OACIsC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,CACKoB,IAAa/B,EAAAA,EAAAA,KAAA,MAAAW,SAAI,gBAC3BX,EAAAA,EAAAA,KAAA,MAAIS,UAAWC,EAASC,SACdyB,EAAiBE,KAAI,SAAAC,GAA2B,IAAxBvD,EAAIuD,EAAJvD,KAAMI,EAAMmD,EAANnD,OAAQ1B,EAAE6E,EAAF7E,GACnC,OACIkD,EAAAA,EAAAA,MAAA,MAAaH,UAAWC,EAASC,SAAA,EAC7BC,EAAAA,EAAAA,MAAA,KAAGH,UAAWC,EAASC,SAAA,CAClB3B,EAAK,KAAGI,MAEbY,EAAAA,EAAAA,KAAA,UACIsB,KAAK,SACLkB,QAAS,kBAAM9D,EAAS8B,EAAAA,mBAA+B9C,GAAI,EAC3D+C,UAAWC,EAAYC,SAA6B,aAPnDjD,EAWjB,MAECsE,IAASpB,EAAAA,EAAAA,MAAA,MAAAD,SAAA,CAAI,yBAAuBqB,EAAMS,aAIvD,ECxCe,SAASC,IAEpB,OACI9B,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACAX,EAAAA,EAAAA,KAAA,MAAAW,SAAI,cACAX,EAAAA,EAAAA,KAAC2C,EAAI,KACL3C,EAAAA,EAAAA,KAAC4C,EAAM,KACX5C,EAAAA,EAAAA,KAAC6C,EAAU,MAGnB,C","sources":["../node_modules/nanoid/index.browser.js","components/hooks/useSelectorHook.js","webpack://react-homework-template/./src/components/Form/Form.module.css?89ba","components/Form/Form.jsx","components/FilterName/FilterName.jsx","webpack://react-homework-template/./src/components/ListUpdate/ListUpdate.module.css?25f4","components/ListUpdate/ListUpdate.jsx","pages/Contacts.js"],"sourcesContent":["export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { useSelector } from 'react-redux';\nimport {\n  getIsLoggedIn,\n  getUser,\n  getRefreshing,\n  getContacts,\n  getFilter,\n} from 'redux/auth/selectors';\n\nexport const useMySelectors = () => {\n  const isLoggedIn = useSelector(getIsLoggedIn);\n  const user = useSelector(getUser);\n  const isRefreshing = useSelector(getRefreshing);\n  const { items } = useSelector(getContacts);\n  const filterValue = useSelector(getFilter);\n\n  return {\n    isLoggedIn,\n    user,\n    isRefreshing,\n    items,\n    filterValue,\n  };\n};","// extracted by mini-css-extract-plugin\nexport default {\"label\":\"Form_label__8nx+5\",\"input\":\"Form_input__FTtTw\",\"form\":\"Form_form__e1yzW\",\"btn\":\"Form_btn__0ebGo\"};","import { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { useDispatch } from 'react-redux';\nimport { contactsAPI } from 'redux/contactsThunk';\nimport { useMySelectors } from 'components/hooks';\nimport { Box, TextField } from '@mui/material';\nimport PropTypes from 'prop-types';\nimport css from './Form.module.css';\n\nfunction Form() {\n  const dispatch = useDispatch();\n  const { items } = useMySelectors();\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  \n    const nameFormId = nanoid();\n    const numberFormId = nanoid();\n\n    const handleInput = event => {\n      const { name, value } = event.currentTarget;\n      switch (name) {\n        case 'name': setName(value);\n          break;\n        case 'number': setNumber(value);\n          break;\n        default:\n          console.log('щось пішло не так')\n          }\n    }\n\n     const handleSubmit = event => {\n      event.preventDefault();\n            const newContact = {\n      name,\n      number,\n      id: nanoid(),\n      }\n  if (items.find(contact => contact.name.includes(newContact.name))) {\n        return alert('ay, такий контакт вже існує')\n      }\n      dispatch(contactsAPI.addContactThunk(newContact))\n        \n          reset();\n    }\n    \n    const reset = () => {\n      setName('');\n      setNumber('');\n    }    \n\n    return (\n      <form onSubmit={handleSubmit} className={css.form}>\n         <Box sx={{ padding: '20px', display: 'flex', gap: '20px', marginBottom: '20px' }}>\n        <TextField\n          id=\"outlined-basic\"\n          label=\"Name\"\n          variant=\"outlined\"\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          myid={nameFormId}\n         onChange={handleInput}/>\n        <TextField\n          id=\"outlined-basic\"\n          label=\"Email\"\n          variant=\"outlined\"\n          type=\"tel\"\n          name=\"number\"\n         value={number}\n      pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n      title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            myid={numberFormId}\n          onChange={handleInput}/>\n        \n\n          <button type=\"submit\" className={css.btn}>Add contact</button>\n          </Box>\n               </form>)\n}\n    \n//       <label htmlFor={nameFormId} className={css.label}>\n//         Name\n//       <input\n//       type=\"text\"\n//        name=\"name\"\n//       value={name}\n//      pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//       title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//             required\n//             className={css.input}\n//         id={nameFormId}\n//         onChange={handleInput}\n// />\n//       </label>\n//       <label htmlFor={numberFormId} className={css.label}>\n//         Number\n//         <input\n//         type=\"tel\"\n//          name=\"number\"\n//          value={number}\n//       pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//       title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//             required\n//             className={css.input}\n//               id={numberFormId}\n//           onChange={handleInput}\n// />\n//       </label>\n\n\nForm.propTypes = {\n  name: PropTypes.string,\n  number: PropTypes.number\n}\n\nexport default Form;","import { useDispatch } from 'react-redux';\nimport { filter } from 'redux/myFilterSlice/myFilterSlice';\nimport { useMySelectors } from 'components/hooks';\nimport { TextField } from '@mui/material';\n\n\nconst Filter = () => {\n    const {filterValue} = useMySelectors();\n    const dispatch = useDispatch();\n    const changeFilter = (event) => dispatch(filter(event.currentTarget.value));\n\n       return  <TextField id=\"standard-basic\" label=\"Find contacts by name\" variant=\"standard\" \n                     type=\"text\"\n                    name=\"filter\"\n                    value={filterValue}\n                 onChange={changeFilter}\n                     sx={{marginLeft: '20px'}}\n                />\n                \n    \n}\n\nexport default Filter;","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ListUpdate_list__unpIe\",\"item\":\"ListUpdate_item__VXSfh\",\"listBtn\":\"ListUpdate_listBtn__BPhEl\",\"text\":\"ListUpdate_text__FZ-zv\"};","import css from './ListUpdate.module.css';\nimport { useMemo, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { contactsAPI } from 'redux/contactsThunk';\nimport { getContacts, getFilter } from 'redux/auth/selectors';\n\nconst ListUpdate = () => {\n    const dispatch = useDispatch();\n  const { items, isLoading, error } = useSelector(getContacts);\n  const filter = useSelector(getFilter)\n   useEffect(() => {\n        dispatch(contactsAPI.fetchContactsThunk());\n    }, [dispatch]);\n  const normalizedFilter = filter.toLowerCase();\n  \n  const filteredContacts = useMemo(() => {\n    if (items) { \n    return items.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter))\n  }\n},[normalizedFilter, items])\n    \n    return (\n        <div>\n            {isLoading && <h1>Loading...</h1>}\n   <ul className={css.list}>\n            {filteredContacts.map(({ name, number, id }) => {\n                return (\n                    <li key={id} className={css.item}>\n                        <p className={css.text}>\n                            {name}: {number}\n                        </p>\n                        <button\n                            type=\"button\"\n                            onClick={() => dispatch(contactsAPI.deleteContactThunk(id))}\n                            className={css.listBtn}                            >\n                            Delete</button>\n                    </li>\n                )\n            })}\n            </ul>\n            {error && <h1>Something went wrong: {error.message}</h1>}\n        </div>\n     \n    )\n};\n\nexport default ListUpdate;","import Form from 'components/Form';\nimport Filter from 'components/FilterName/FilterName';\nimport ListUpdate from 'components/ListUpdate';\n\n\nexport default function Contacts() {\n  \n    return (\n        <div>\n        <h1>Contacts</h1>\n            <Form />\n            <Filter/>\n        <ListUpdate/>\n            </div>\n    );\n}"],"names":["nanoid","size","arguments","length","undefined","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","useMySelectors","isLoggedIn","useSelector","getIsLoggedIn","user","getUser","isRefreshing","getRefreshing","items","getContacts","filterValue","getFilter","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","number","setNumber","nameFormId","numberFormId","handleInput","event","_event$currentTarget","currentTarget","value","console","log","reset","_jsx","onSubmit","preventDefault","newContact","find","contact","includes","alert","contactsAPI","className","css","children","_jsxs","Box","sx","padding","display","gap","marginBottom","TextField","label","variant","type","pattern","title","required","myid","onChange","filter","marginLeft","_useSelector","isLoading","error","useEffect","normalizedFilter","toLowerCase","filteredContacts","useMemo","map","_ref","onClick","message","Contacts","Form","Filter","ListUpdate"],"sourceRoot":""}