{"version":3,"file":"static/js/891.7a5b7142.chunk.js","mappings":"+NAmBWA,EAAS,WAAH,IAAIC,EAAIC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAAE,OAC5BG,OAAOC,gBAAgB,IAAIC,WAAWN,IAAOO,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGV,GAAG,GAAG,E,wCC/BR,EAA+E,mBAA/E,EAAwG,kB,UC+HxG,MAxHA,WAEE,IAAAG,GAAwBC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACpBI,GAA4BL,EAAAA,EAAAA,UAAS,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAjCE,EAAMD,EAAA,GAAEE,EAASF,EAAA,GACxBG,GAAqBC,EAAAA,EAAAA,MAAdC,GAAqCT,EAAAA,EAAAA,GAAAO,EAAA,GAA3B,GACTG,GAASC,EAAAA,EAAAA,MAATD,KACAE,EAAa5B,IACb6B,EAAe7B,IAEf8B,EAAc,SAAAC,GAClB,IAAAC,EAAwBD,EAAME,cAAtBhB,EAAIe,EAAJf,KAAMiB,EAAKF,EAALE,MACd,OAAQjB,GACN,IAAK,OAAQC,EAAQgB,GACnB,MACF,IAAK,SAAUZ,EAAUY,GACvB,MACF,QACEC,QAAQC,IAAI,2FAElB,EAEKC,EAAY,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EAAMX,GAAK,IAAAY,EAAA,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAIvB,OAHRhB,EAAMiB,iBAAiBH,EAAAI,GAErBhC,EAAI4B,EAAAK,GACJ7B,EAAMwB,EAAAE,KAAA,EACI/C,IAAQ,OAAhB,GAAgB6C,EAAAM,GAAAN,EAAAO,KAHdT,EAAU,CACd1B,KAAI4B,EAAAI,GACJ5B,OAAMwB,EAAAK,GACNzC,GAAEoC,EAAAM,KAEAzB,EAAK2B,MAAK,SAAAC,GAAO,OAAIA,EAAQrC,KAAKsC,SAASZ,EAAW1B,KAAK,IAAE,CAAD4B,EAAAE,KAAA,eAAAF,EAAAW,OAAA,SACvDC,MAAM,oIAA8B,OAErC,OAARC,IAAQb,EAAAC,KAAA,GAAAD,EAAAE,KAAA,GAEAtB,EAAWkB,GAAY,KAAD,GAE9BgB,EAAAA,GAAAA,QAAc,kFAAkB,CAC9BC,SAAU,IACVC,SAAU,cACVhB,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAiB,GAAAjB,EAAA,UAGAc,EAAAA,GAAAA,MAAY,2FAAoB,yBAAAd,EAAAkB,OAAA,GAAArB,EAAA,oBAGjC,gBAvBgBsB,GAAA,OAAA1B,EAAA2B,MAAA,KAAA/D,UAAA,KAyBXwD,EAAQ,WACZxC,EAAQ,IACRI,EAAU,GACZ,EAEA,OACE4C,EAAAA,EAAAA,KAAA,QAAMC,SAAU9B,EAAc+B,UAAWC,EAASC,UAC/CC,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACC,GAAI,CAAEC,QAAS,OAAQC,QAAS,OAAQC,IAAK,OAAQC,aAAc,QAASP,SAAA,EAClFJ,EAAAA,EAAAA,KAACY,EAAAA,EAAS,CACRrE,GAAG,iBACHsE,MAAM,OACNC,QAAQ,WACRC,KAAK,OACLhE,KAAK,OACLiB,MAAOjB,EACPiE,QAAQ,yHACRC,MAAM,yIACJC,UAAQ,EACVC,KAAMzD,EACP0D,SAAUxD,KACXoC,EAAAA,EAAAA,KAACY,EAAAA,EAAS,CACRrE,GAAG,iBACHsE,MAAM,SACNC,QAAQ,WACRC,KAAK,MACLhE,KAAK,SACNiB,MAAOb,EACV6D,QAAQ,yFACRC,MAAM,+FACAC,UAAQ,EACRC,KAAMxD,EACRyD,SAAUxD,KAGVoC,EAAAA,EAAAA,KAAA,UAAQe,KAAK,SAASb,UAAWC,EAAQC,SAAC,oBAGpD,E,8BCrEA,EAhBe,WACX,IAAMiB,GAAcC,EAAAA,EAAAA,IAAYC,EAAAA,IAC1BC,GAAWC,EAAAA,EAAAA,MAGd,OAAQzB,EAAAA,EAAAA,KAACY,EAAAA,EAAS,CAACrE,GAAG,iBAAiBsE,MAAM,wBAAwBC,QAAQ,WAC/DC,KAAK,OACNhE,KAAK,SACLiB,MAAOqD,EACVD,SANQ,SAACvD,GAAK,OAAK2D,GAASE,EAAAA,EAAAA,GAAO7D,EAAME,cAAcC,OAAQ,EAO3DuC,GAAI,CAACoB,WAAY,SAItC,ECnBA,EAAuB,yBAAvB,EAAuD,yBAAvD,EAA0F,4BAA1F,EAA6H,yBCGhHC,EAAiB,SAAHxD,GAA2C,IAADyD,EAAAzD,EAApCgB,QAAW7C,EAAEsF,EAAFtF,GAAIQ,EAAI8E,EAAJ9E,KAAMI,EAAM0E,EAAN1E,OAClD2E,GAAwCC,EAAAA,EAAAA,MAA0BC,GAAAlF,EAAAA,EAAAA,GAAAgF,EAAA,GAA3DG,EAAaD,EAAA,GAAKE,EAASF,EAAA,GAATE,UAEzB,OACI7B,EAAAA,EAAAA,MAAA,MAAaH,UAAWC,EAASC,SAAA,EACjBC,EAAAA,EAAAA,MAAA,KAAGH,UAAWC,EAASC,SAAA,CAClBrD,EAAK,KAAGI,MAEb6C,EAAAA,EAAAA,KAAA,UACIe,KAAK,SACjBoB,QAAS,WAAQF,EAAc1F,GAAKkD,EAAAA,GAAAA,QAAc,8FAAmB,EACzDS,UAAWC,EACXiC,SAAUF,EAAU9B,SACnB8B,EAAY,cAAgB,aATxC3F,EAYjB,ECeA,EA5BmB,WACf,IAAMmF,GAASJ,EAAAA,EAAAA,IAAYC,EAAAA,IAC3Bc,GAA4C5E,EAAAA,EAAAA,MAApCD,EAAI6E,EAAJ7E,KAAM8E,EAAOD,EAAPC,QAASC,EAAKF,EAALE,MAAOL,EAASG,EAATH,WAE7BM,EAAAA,EAAAA,YAAU,WACXF,GACF,GAAG,CAACA,IACJ,IAAMG,EAAmBf,EAAOgB,cAE1BC,GAAmBC,EAAAA,EAAAA,UAAQ,WAC/B,GAAIpF,EACJ,OAAOA,EAAKkE,QAAO,SAAAtC,GAAO,OACxBA,EAAQrC,KAAK2F,cAAcrD,SAASoD,EAAiB,GAE3D,GAAE,CAACA,EAAkBjF,IAEjB,OACI6C,EAAAA,EAAAA,MAAA,OAAAD,SAAA,CACK8B,IAAalC,EAAAA,EAAAA,KAAA,MAAAI,SAAI,gBAC3BJ,EAAAA,EAAAA,KAAA,MAAIE,UAAWC,EAASC,SACV5C,GAAQmF,EAAiBE,KAAI,SAAAzD,GAAO,OAAIY,EAAAA,EAAAA,KAAC4B,EAAc,CAAkBxC,QAASA,GAArBA,EAAQ7C,GAAwB,MAEjGgG,IAASlC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,CAAI,yBAAuBmC,EAAMO,aAIvD,EC5Be,SAASC,IAEpB,OACI1C,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACAJ,EAAAA,EAAAA,KAAA,MAAAI,SAAI,cACAJ,EAAAA,EAAAA,KAACgD,EAAI,KACLhD,EAAAA,EAAAA,KAACiD,EAAM,KACXjD,EAAAA,EAAAA,KAACkD,EAAU,MAGnB,C","sources":["../node_modules/nanoid/index.browser.js","webpack://react-homework-template/./src/components/Form/Form.module.css?89ba","components/Form/Form.jsx","components/FilterName/FilterName.jsx","webpack://react-homework-template/./src/components/ListUpdate/ListUpdate.module.css?25f4","components/ListUpdateItem/ListUpdateItem.jsx","components/ListUpdate/ListUpdate.jsx","pages/Contacts.js"],"sourcesContent":["export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","// extracted by mini-css-extract-plugin\nexport default {\"label\":\"Form_label__8nx+5\",\"input\":\"Form_input__FTtTw\",\"form\":\"Form_form__e1yzW\",\"btn\":\"Form_btn__0ebGo\"};","import { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { Box, TextField } from '@mui/material';\nimport { useAddContactMutation, useGetContactsQuery } from 'redux/rtkquerySlice';\nimport  { toast  } from 'react-hot-toast';\nimport PropTypes from 'prop-types';\nimport css from './Form.module.css';\n\nfunction Form() {\n  \n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const [addContact] = useAddContactMutation();\n  const { data } = useGetContactsQuery();\n    const nameFormId = nanoid();\n    const numberFormId = nanoid();\n\n    const handleInput = event => {\n      const { name, value } = event.currentTarget;\n      switch (name) {\n        case 'name': setName(value);\n          break;\n        case 'number': setNumber(value);\n          break;\n        default:\n          console.log('щось пішло не так')\n          }\n    }\n\n  const  handleSubmit = async event => {\n    event.preventDefault();\n    const newContact = {\n      name,\n      number,\n      id: await nanoid(),\n    }\n    if (data.find(contact => contact.name.includes(newContact.name))) {\n      return alert('ay, такий контакт вже існує')\n    }\n    reset();\n    try {\n      await addContact(newContact);\n     \n    toast.success('Контакт додано', {\n      duration: 4000,\n      position: 'top-right',\n    })\n  \n    } catch {\n      toast.error('Щось пішло не так')\n    }\n  \n    }\n    \n    const reset = () => {\n      setName('');\n      setNumber('');\n    }    \n\n    return (\n      <form onSubmit={handleSubmit} className={css.form}>\n         <Box sx={{ padding: '20px', display: 'flex', gap: '20px', marginBottom: '20px' }}>\n        <TextField\n          id=\"outlined-basic\"\n          label=\"Name\"\n          variant=\"outlined\"\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          myid={nameFormId}\n         onChange={handleInput}/>\n        <TextField\n          id=\"outlined-basic\"\n          label=\"Number\"\n          variant=\"outlined\"\n          type=\"tel\"\n          name=\"number\"\n         value={number}\n      pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n      title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            myid={numberFormId}\n          onChange={handleInput}/>\n        \n\n          <button type=\"submit\" className={css.btn}>Add contact</button>\n        </Box>\n                       </form>)\n}\n    \n//       <label htmlFor={nameFormId} className={css.label}>\n//         Name\n//       <input\n//       type=\"text\"\n//        name=\"name\"\n//       value={name}\n//      pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//       title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//             required\n//             className={css.input}\n//         id={nameFormId}\n//         onChange={handleInput}\n// />\n//       </label>\n//       <label htmlFor={numberFormId} className={css.label}>\n//         Number\n//         <input\n//         type=\"tel\"\n//          name=\"number\"\n//          value={number}\n//       pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//       title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//             required\n//             className={css.input}\n//               id={numberFormId}\n//           onChange={handleInput}\n// />\n//       </label>\n\n\nForm.propTypes = {\n  name: PropTypes.string,\n  number: PropTypes.number\n}\n\nexport default Form;","import { useDispatch, useSelector } from 'react-redux';\nimport { filter } from 'redux/myFilterSlice/myFilterSlice';\nimport { getFilter } from 'redux/auth/selectors';\nimport { TextField } from '@mui/material';\n\n\nconst Filter = () => {\n    const filterValue = useSelector(getFilter);\n    const dispatch = useDispatch();\n    const changeFilter = (event) => dispatch(filter(event.currentTarget.value));\n\n       return  <TextField id=\"standard-basic\" label=\"Find contacts by name\" variant=\"standard\" \n                     type=\"text\"\n                    name=\"filter\"\n                    value={filterValue}\n                 onChange={changeFilter}\n                     sx={{marginLeft: '20px'}}\n                />\n                \n    \n}\n\nexport default Filter;","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ListUpdate_list__unpIe\",\"item\":\"ListUpdate_item__VXSfh\",\"listBtn\":\"ListUpdate_listBtn__BPhEl\",\"text\":\"ListUpdate_text__FZ-zv\"};","import css from '../ListUpdate/ListUpdate.module.css';\nimport {  useDeleteContactMutation } from 'redux/rtkquerySlice';\nimport { toast } from 'react-hot-toast';\n\nexport const ListUpdateItem = ({ contact: { id, name, number } }) => {\n    const [deleteContact, {  isLoading }] = useDeleteContactMutation();\n\n    return (\n        <li key={id} className={css.item}>\n                        <p className={css.text}>\n                            {name}: {number}\n                        </p>\n                        <button\n                            type=\"button\"\n                onClick={() => { deleteContact(id); toast.success('Контакт видалено')}}\n                            className={css.listBtn}\n                            disabled={isLoading}>\n                            {isLoading ? 'Deleting...' : 'Delete'}</button>\n                    </li>\n    )\n}","import css from './ListUpdate.module.css';\nimport { useMemo, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport {  getFilter } from 'redux/auth/selectors';\nimport { useGetContactsQuery} from 'redux/rtkquerySlice';\nimport { ListUpdateItem } from 'components/ListUpdateItem/ListUpdateItem';\n\nconst ListUpdate = () => {\n    const filter = useSelector(getFilter)    \n    const { data, refetch, error, isLoading } = useGetContactsQuery();\n    \n     useEffect(() => {\n    refetch();\n  }, [refetch]);\n  const normalizedFilter = filter.toLowerCase();\n  \n  const filteredContacts = useMemo(() => {\n    if (data) { \n    return data.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter))\n  }\n},[normalizedFilter, data])\n    \n    return (\n        <div>\n            {isLoading && <h1>Loading...</h1>}\n   <ul className={css.list}>\n                {data && filteredContacts.map(contact => <ListUpdateItem key={contact.id} contact={contact} />)}\n            </ul>\n            {error && <h1>Something went wrong: {error.message}</h1>}\n        </div>\n     \n    )\n};\n\nexport default ListUpdate;","import Form from 'components/Form';\nimport Filter from 'components/FilterName/FilterName';\nimport ListUpdate from 'components/ListUpdate';\n\n\nexport default function Contacts() {\n  \n    return (\n        <div>\n        <h1>Contacts</h1>\n            <Form />\n            <Filter/>\n        <ListUpdate/>\n            </div>\n    );\n}"],"names":["nanoid","size","arguments","length","undefined","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","_useState","useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","number","setNumber","_useAddContactMutatio","useAddContactMutation","addContact","data","useGetContactsQuery","nameFormId","numberFormId","handleInput","event","_event$currentTarget","currentTarget","value","console","log","handleSubmit","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","newContact","wrap","_context","prev","next","preventDefault","t0","t1","t2","sent","find","contact","includes","abrupt","alert","reset","toast","duration","position","t3","stop","_x","apply","_jsx","onSubmit","className","css","children","_jsxs","Box","sx","padding","display","gap","marginBottom","TextField","label","variant","type","pattern","title","required","myid","onChange","filterValue","useSelector","getFilter","dispatch","useDispatch","filter","marginLeft","ListUpdateItem","_ref$contact","_useDeleteContactMuta","useDeleteContactMutation","_useDeleteContactMuta2","deleteContact","isLoading","onClick","disabled","_useGetContactsQuery","refetch","error","useEffect","normalizedFilter","toLowerCase","filteredContacts","useMemo","map","message","Contacts","Form","Filter","ListUpdate"],"sourceRoot":""}